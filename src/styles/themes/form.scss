@import 'src/styles/variables.scss';

// Form Styles
.form-row {
  display: flex;
  width: 100%;
  gap: $spacingSmall;

  @media (max-width: $mobileBreakpoint) {
    flex-direction: column;
    gap: 0;
  }
}

.filter-wrapper {
  flex: 1;
  padding: 1rem;

  h3 {
    margin-bottom: 0.5rem;
    color: $textColor; /* Text color */
    font-size: $textMedium; /* Use text size variable */
  }

  .radio-group {
    display: flex;
    flex-direction: column;

    input[type="radio"] {
      display: none;

      &:checked + label {
        background-color: $cardHoverBackgroundColor; /* Background color when checked */
        color:  $textColor;
      }

      &:hover + label {
        background-color: $cardHoverBackgroundColor; /* Background color on hover */
        color:  $textColor;
      }
    }

    label {
      display: flex;
      align-items: center;
      padding: 8px 12px;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
      color: $textColorLight;
    }
  }
}

.input-wrapper {
  flex: 1;

  .submit-wrapper {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: $spacingSmall;
    margin-bottom: $spacingMedium;

    @media (max-width: $mobileBreakpoint) {
      grid-template-columns: 1fr;
    }
  }

  .btn-label {
    display: flex;
    align-items: center;
    justify-content: space-between;
    color: $textColor; /* Text color */

    button {
      padding: calc($spacingSmall / 2); /* Padding for the button */
      margin-left: $spacingSmall; /* Spacing between button and label */
      background-color: transparent; /* Button background color */
      color: $primaryColor; /* Button text color */
      border: none; /* Remove button border */
      border-radius: $buttonRadius; /* Button border radius */
      cursor: pointer; /* Change cursor to pointer on hover */
      transition: ease-in-out .3s; /* Smooth transition on hover */
      font-size: $textSmall; /* Use text size variable */

      &:hover {
        background-color: $primaryColor; /* Lighter shade of primary color on hover */
        color: #fff; /* Text color on hover */
      }
    }
  }

  label {
    display: block;
    color: $textColor; /* Text color */
    margin-top: $spacingSmall; /* Spacing between label and input */
    margin-bottom: calc($spacingSmall / 2); /* Spacing between label and input */
    font-size: $textSmall; /* Use text size variable */
  }
}

// For filter inputs
.page-input {
  display: flex;
  align-items: center;

  .input-field {
    flex: 1;
    padding: $spacingSmall;
    border-radius: $buttonRadius;
    margin-right: $spacingSmall;
    outline: none;
    font-size: $textMedium; /* Use text size variable */

    @media (max-width: $mobileBreakpoint) {
      margin: $spacingSmall 0;
    }

  }

  .filter-button,
  .clear-filter-button {
    background-color: $primaryColor;
    color: #fff;
    border: none;
    border-radius: $buttonRadius;
    padding: $spacingSmall $spacingMedium;
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: $textSmall; /* Use text size variable */

    &:hover {
      background-color: darken($primaryColor, 10%);
    }

    svg {
      margin-right: $spacingSmall;
    }
  }

  .clear-filter-button {
    background-color: $cancelColor;

    &:hover {
      background-color: darken($cancelColorHover, 10%);
    }
  }
}
